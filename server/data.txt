2.2.2 Non-Persistent and Persistent Connections
In many Internet applications, the client and server communicate for an extended
period of time, with the client making a series of requests and the server responding to
each of the requests. Depending on the application and on how the application is being
used, the series of requests may be made back-to-back, periodically at regular intervals,
or intermittently. When this client-server interaction is taking place over TCP, the application developer needs to make an important decision––should each request/response
pair be sent over a separate TCP connection, or should all of the requests and their corresponding responses be sent over the same TCP connection? In the former approach,
the application is said to use non-persistent connections; and in the latter approach,
persistent connections. To gain a deep understanding of this design issue, let’s examine the advantages and disadvantages of persistent connections in the context of a specific application, namely, HTTP, which can use both non-persistent connections and
persistent connections. Although HTTP uses persistent connections in its default mode,
HTTP clients and servers can be configured to use non-persistent connections instead.
HTTP with Non-Persistent Connections
Let’s walk through the steps of transferring a Web page from server to client for the
case of non-persistent connections. Let’s suppose the page consists of a base HTML
100 CHAPTER 2 • APPLICATION LAYER
file and 10 JPEG images, and that all 11 of these objects reside on the same server.
Further suppose the URL for the base HTML file is
http://www.someSchool.edu/someDepartment/home.index
Here is what happens:
1. The HTTP client process initiates a TCP connection to the server
www.someSchool.edu on port number 80, which is the default port number for HTTP. Associated with the TCP connection, there will be a socket at the
client and a socket at the server.
2. The HTTP client sends an HTTP request message to the server via its socket. The
request message includes the path name /someDepartment/home.index.
(We will discuss HTTP messages in some detail below.)
3. The HTTP server process receives the request message via its socket, retrieves
the object /someDepartment/home.index from its storage (RAM or
disk), encapsulates the object in an HTTP response message, and sends the
response message to the client via its socket.
4. The HTTP server process tells TCP to close the TCP connection. (But TCP
doesn’t actually terminate the connection until it knows for sure that the client
has received the response message intact.)
5. The HTTP client receives the response message. The TCP connection terminates. The message indicates that the encapsulated object is an HTML file. The
client extracts the file from the response message, examines the HTML file,
and finds references to the 10 JPEG objects.
6. The first four steps are then repeated for each of the referenced JPEG objects.
As the browser receives the Web page, it displays the page to the user. Two different browsers may interpret (that is, display to the user) a Web page in somewhat different ways. HTTP has nothing to do with how a Web page is interpreted by a client. The
HTTP specifications ([RFC 1945] and [RFC 2616]) define only the communication
protocol between the client HTTP program and the server HTTP program.
The steps above illustrate the use of non-persistent connections, where each TCP
connection is closed after the server sends the object—the connection does not persist
for other objects. Note that each TCP connection transports exactly one request message and one response message. Thus, in this example, when a user requests the Web
page, 11 TCP connections are generated.
In the steps described above, we were intentionally vague about whether the
client obtains the 10 JPEGs over 10 serial TCP connections, or whether some of the
JPEGs are obtained over parallel TCP connections. Indeed, users can configure
modern browsers to control the degree of parallelism. In their default modes, most
browsers open 5 to 10 parallel TCP connections, and each of these connections handles one request-response transaction. If the user prefers, the maximum number of
2.2 • THE WEB AND HTTP 101
parallel connections can be set to one, in which case the 10 connections are established serially. As we’ll see in the next chapter, the use of parallel connections shortens the response time.
Before continuing, let’s do a back-of-the-envelope calculation to estimate the
amount of time that elapses from when a client requests the base HTML file until
the entire file is received by the client. To this end, we define the round-trip time
(RTT), which is the time it takes for a small packet to travel from client to server
and then back to the client. The RTT includes packet-propagation delays, packetqueuing delays in intermediate routers and switches, and packet-processing
delays. (These delays were discussed in Section 1.4.) Now consider what happens
when a user clicks on a hyperlink. As shown in Figure 2.7, this causes the browser
to initiate a TCP connection between the browser and the Web server; this
involves a “three-way handshake”—the client sends a small TCP segment to the
server, the server acknowledges and responds with a small TCP segment, and,
finally, the client acknowledges back to the server. The first two parts of the threeway handshake take one RTT. After completing the first two parts of the handshake, the client sends the HTTP request message combined with the third part of
102 CHAPTER 2 • APPLICATION LAYER
Time
at client
Time
at server
Initiate TCP
connection
RTT
Request file
RTT
Entire file received
Time to transmit file
Figure 2.7  Back-of-the-envelope calculation for the time needed to
request and receive an HTML file
the three-way handshake (the acknowledgment) into the TCP connection. Once
the request message arrives at the server, the server sends the HTML file into the
TCP connection. This HTTP request/response eats up another RTT. Thus, roughly,
the total response time is two RTTs plus the transmission time at the server of the
HTML file.
HTTP with Persistent Connections
Non-persistent connections have some shortcomings. First, a brand-new connection must be established and maintained for each requested object. For each of
these connections, TCP buffers must be allocated and TCP variables must be kept
in both the client and server. This can place a significant burden on the Web server,
which may be serving requests from hundreds of different clients simultaneously.
Second, as we just described, each object suffers a delivery delay of two RTTs—
one RTT to establish the TCP connection and one RTT to request and receive an
object.
With persistent connections, the server leaves the TCP connection open after
sending a response. Subsequent requests and responses between the same client and
server can be sent over the same connection. In particular, an entire Web page (in
the example above, the base HTML file and the 10 images) can be sent over a single
persistent TCP connection. Moreover, multiple Web pages residing on the same
server can be sent from the server to the same client over a single persistent TCP
connection. These requests for objects can be made back-to-back, without waiting
for replies to pending requests (pipelining). Typically, the HTTP server closes a connection when it isn’t used for a certain time (a configurable timeout interval). When
the server receives the back-to-back requests, it sends the objects back-to-back. The
default mode of HTTP uses persistent connections with pipelining. We’ll quantitatively compare the performance of non-persistent and persistent connections in the
homework problems of Chapters 2 and 3. You are also encouraged to see [Heidemann 1997; Nielsen 1997].
2.2.3 HTTP Message Format
The HTTP specifications [RFC 1945; RFC 2616] include the definitions of the
HTTP message formats. There are two types of HTTP messages, request messages
and response messages, both of which are discussed below.
HTTP Request Message
Below we provide a typical HTTP request message:
GET /somedir/page.html HTTP/1.1
Host: www.someschool.edu
2.2 • THE WEB AND HTTP 103
Connection: close
User-agent: Mozilla/5.0
Accept-language: fr
We can learn a lot by taking a close look at this simple request message. First of
all, we see that the message is written in ordinary ASCII text, so that your ordinary
computer-literate human being can read it. Second, we see that the message consists
of five lines, each followed by a carriage return and a line feed. The last line is followed by an additional carriage return and line feed. Although this particular request
message has five lines, a request message can have many more lines or as few as
one line. The first line of an HTTP request message is called the request line; the
subsequent lines are called the header lines. The request line has three fields: the
method field, the URL field, and the HTTP version field. The method field can take
on several different values, including GET, POST, HEAD, PUT, and DELETE.
The great majority of HTTP request messages use the GET method. The GET
method is used when the browser requests an object, with the requested object identified in the URL field. In this example, the browser is requesting the object
/somedir/page.html. The version is self-explanatory; in this example, the
browser implements version HTTP/1.1.
Now let’s look at the header lines in the example. The header line Host:
www.someschool.edu specifies the host on which the object resides. You might
think that this header line is unnecessary, as there is already a TCP connection in
place to the host. But, as we’ll see in Section 2.2.5, the information provided by the
host header line is required by Web proxy caches. By including the Connection:
close header line, the browser is telling the server that it doesn’t want to bother
with persistent connections; it wants the server to close the connection after sending
the requested object. The User-agent: header line specifies the user agent, that
is, the browser type that is making the request to the server. Here the user agent is
Mozilla/5.0, a Firefox browser. This header line is useful because the server can
actually send different versions of the same object to different types of user agents.
(Each of the versions is addressed by the same URL.) Finally, the Acceptlanguage: header indicates that the user prefers to receive a French version of
the object, if such an object exists on the server; otherwise, the server should send
its default version. The Accept-language: header is just one of many content
negotiation headers available in HTTP.
Having looked at an example, let’s now look at the general format of a request
message, as shown in Figure 2.8. We see that the general format closely follows our
earlier example. You may have noticed, however, that after the header lines (and the
additional carriage return and line feed) there is an “entity body.” The entity body is
empty with the GET method, but is used with the POST method. An HTTP client
often uses the POST method when the user fills out a form—for example, when a
user provides search words to a search engine. With a POST message, the user is still
requesting a Web page from the server, but the specific contents of the Web page
104 CHAPTER 2 • APPLICATION LAYER
depend on what the user entered into the form fields. If the value of the method field
is POST, then the entity body contains what the user entered into the form fields.
We would be remiss if we didn’t mention that a request generated with a form
does not necessarily use the POST method. Instead, HTML forms often use the GET
method and include the inputted data (in the form fields) in the requested URL. For
example, if a form uses the GET method, has two fields, and the inputs to the two
fields are monkeys and bananas, then the URL will have the structure
www.somesite.com/animalsearch?monkeys&bananas. In your day-today Web surfing, you have probably noticed extended URLs of this sort.
The HEAD method is similar to the GET method. When a server receives a
request with the HEAD method, it responds with an HTTP message but it leaves out
the requested object. Application developers often use the HEAD method for debugging. The PUT method is often used in conjunction with Web publishing tools. It
allows a user to upload an object to a specific path (directory) on a specific Web
server. The PUT method is also used by applications that need to upload objects to
Web servers. The DELETE method allows a user, or an application, to delete an
object on a Web server.
HTTP Response Message
Below we provide a typical HTTP response message. This response message could
be the response to the example request message just discussed.
HTTP/1.1 200 OK
Connection: close
2.2 • THE WEB AND HTTP 105
method sp sp cr lf
header field name: cr lf
Header lines
Blank line
Entity body
Request line
sp value
cr lf
cr lf
header field name: value sp
URL Version
Figure 2.8  General format of an HTTP request message
Date: Tue, 09 Aug 2011 15:44:04 GMT
Server: Apache/2.2.3 (CentOS)
Last-Modified: Tue, 09 Aug 2011 15:11:03 GMT
Content-Length: 6821
Content-Type: text/html
(data data data data data ...)
Let’s take a careful look at this response message. It has three sections: an initial status line, six header lines, and then the entity body. The entity body is the
meat of the message—it contains the requested object itself (represented by data
data data data data ...). The status line has three fields: the protocol version field, a status code, and a corresponding status message. In this example, the
status line indicates that the server is using HTTP/1.1 and that everything is OK
(that is, the server has found, and is sending, the requested object).
Now let’s look at the header lines. The server uses the Connection: close
header line to tell the client that it is going to close the TCP connection after sending
the message. The Date: header line indicates the time and date when the HTTP
response was created and sent by the server. Note that this is not the time when the
object was created or last modified; it is the time when the server retrieves the
object from its file system, inserts the object into the response message, and sends
the response message. The Server: header line indicates that the message was generated by an Apache Web server; it is analogous to the User-agent: header line
in the HTTP request message. The Last-Modified: header line indicates the
time and date when the object was created or last modified. The Last-Modified:
header, which we will soon cover in more detail, is critical for object caching, both in
the local client and in network cache servers (also known as proxy servers). The
Content-Length: header line indicates the number of bytes in the object being
sent. The Content-Type: header line indicates that the object in the entity body is
HTML text. (The object type is officially indicated by the Content-Type: header
and not by the file extension.)
Having looked at an example, let’s now examine the general format of a
response message, which is shown in Figure 2.9. This general format of the response
message matches the previous example of a response message. Let’s say a few additional words about status codes and their phrases. The status code and associated
phrase indicate the result of the request. Some common status codes and associated
phrases include:
• 200 OK: Request succeeded and the information is returned in the response.
• 301 Moved Permanently: Requested object has been permanently moved;
the new URL is specified in Location: header of the response message. The
client software will automatically retrieve the new URL.
106 CHAPTER 2 • APPLICATION LAYER
• 400 Bad Request: This is a generic error code indicating that the request
could not be understood by the server.
• 404 Not Found: The requested document does not exist on this server.
• 505 HTTP Version Not Supported: The requested HTTP protocol
version is not supported by the server.
